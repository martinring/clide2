@type: rgb(43,145,175);
@keyword: blue;
@string: rgb(3, 106, 7);
@variable: #00009b;
@verbatim: gray;
@comment: rgb(76, 136, 107);

 /* outer syntax */
.cm-s-default {   // TODO: Make isabelle specific;
  span {
    font-family: 'Main'
  }
  span.cm-sup { 
    font-size: 66%;
    line-height: 0;
    vertical-align: super;
  }
  span.cm-sub { 
    font-size: 66%;
    line-height: 0;
    vertical-align: sub;    
  }
  span.cm-bold { 
    font-weight: bold;    
  }
  .outputWidget {
    height: 0;
    visibility: hidden;
    white-space: pre;
    margin-left: 8px;
    padding-left: 8px;
    background: rgba(0,0,0,0.05);
    border-left: 8px solid @brand-success;
    &.error, &.failed {
      border-left-color: @brand-danger;
    }
    &.warning {
      border-left-color: @brand-warning;
    }
  }
  isabelle-symbol {
    font-family: 'AMS';
  }
  span.cm-indent {
    font-family: Typewriter;
    line-height: 0;
  }
  span.cm-keyword {
    color: @keyword;
  }
  span.cm-operator {

  }
  span.cm-command {
    color: @keyword;
    font-weight: bold;
  }
  span.cm-string {    
    /*color: gray;*/
    /*background: rgba(0,0,0,0.05);*/
  }  
  span.cm-altstring {
    background: rgba(0,0,0,0.05);
  }
  span.cm-verbatim {
    /*background: rgba(0,0,0,0.05);*/
    color: @verbatim;
    &.cm-ML, &.cm-ML_val {
      font-family: Typewriter;
    }    
  }
  span.cm-comment {
    color: @comment; 
    font-family: Typewriter; 
  }
  span.cm-malformed {
    text-decoration: line-through;
  }

  span.cm-command_span {

  }
  span.cm-ignored_span {

  }
  span.cm-malformed_span {

  }
  /* inner syntax */
  span.cm-tfree {
    font-family: Math;
    color: @type 
  }
  span.cm-tvar {
    color: @type 
  }
  span.cm-entity {
    color: black ;
    &:hover {
      text-decoration: underline;
    }
  }
  span.cm-free, span.cm-term {
    font-family: Math;
    color: #aa00ff ;
  }
  span.cm-skolem {
    color: #d2691e 
  }
  span.cm-bound {
    color: green 
  }
  span.cm-var {
    color: @variable 
  }
  span.cm-numeral {

  }
  span.cm-literal {

  }
  span.cm-delimiter, span.cm-control {
    color: gray;    
  }      
  span.cm-inner_string {
    
  }
  span.cm-inner_comment {

  }
  span.cm-token_range {

  }
  span.cm-sort {

  }
  span.cm-typ {

  }
  span.cm-term {

  }
  span.cm-prop {

  }

  span.cm-typing {
    
  }

  span.cm-attribute {
    
  }

  span.cm-method {

  }


  /* embedded source text */
  span.cm-ML_source {

  }
  span.cm-doc_source {

  }
  span.cm-antiq {

  }

    /* ML syntax */

  span.cm-ML_keyword {
    color: @keyword
  }
  span.cm-ML_delimiter {

  }
  span.cm-ML_tvar {

  }
  span.cm-ML_numeral {
    color: red
  }
  span.cm-ML_char {
    color: @string
  }
  span.cm-ML_string {
    color: @string
  }
  span.cm-ML_comment {
    color: #8b0000
  }
  span.cm-ML_malform {
    color: #ff6a6a
  }
  span.cm-ML_def {

  }
  span.cm-ML_open {

  }
  span.cm-ML_struct {

  }
  span.cm-ML_typing {

  }

  span.cm-error{
    background-color: fade(#a20025,50%)
  }

  span.cm-warning{  
    background-color: fade(#fa6800,50%);    
  }

  span.cm-substitution {
    &.cm-caligraphic { font-family: Caligraphic }
    &.cm-fraktur     { font-family: Fraktur }
    &.cm-number      { font-family: Caligraphic }
    &.cm-ams         { font-family: AMS }
  }
}
  
div.gutter-state-running {  
  height: 26px;
  border-left: 3px solid @brand-info;
}
div.gutter-state-unprocessed {
  height: 26px;
  border-left: 3px solid @gray;
}
div.gutter-state-error {
  height: 26px;
  border-left: 3px solid @brand-danger;
}
div.gutter-state-failed {
  height: 26px;
  border-left: 3px solid @brand-danger;
}
div.gutter-state-warning {
  height: 26px;
  border-left: 3px solid @brand-warning;
}
.current_line.cm-control {
  font-size: inherit !important;
}

/*
  val PROTOCOL = "protocol"
  val SYSTEM = "system"
  val STDOUT = "stdout"
  val STDERR = "stderr"
  val EXIT = "exit"

  val LEGACY = "legacy"

  val NO_REPORT = "no_report"

  val BAD = "bad"

*/

.inlineStates .active .outputWidget {  
  height: auto;
  visibility: visible;  
}

.inlineErrors .active .outputWidget {
  &.error, &.failed, &.warning {
    height: auto;
    visibility: visible;
  }
}